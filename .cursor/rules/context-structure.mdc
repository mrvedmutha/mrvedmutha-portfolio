---
description: how to write and structure context and related files
globs: 
alwaysApply: false
---
# Context Structure Guidelines

This rule defines how to organize and structure context-related code in the project. **All TypeScript interfaces and types must be written in `./src/types`, with subfolders as needed.**

## Directory Structure

```
src/
├── context/
│   ├── constants/           # Constant values used across contexts
│   │   ├── navigation.ts
│   │   └── theme.ts
│   └── providers/           # Context providers
│       └── index.ts
├── types/                   # All TypeScript interfaces and types
│   ├── context/             # (Optional) Subfolder for context-related types
│   │   ├── navigation.ts
│   │   └── theme.ts
│   └── index.ts             # Export all types
```

## Constant Files Structure

- Place all constant arrays, objects, and values in dedicated files under `context/constants/`.
- **Do not define types or interfaces in the constants files.**
- **Exported constant variable names must use PascalCase (e.g., NavigationLinks). Do not use SNAKE_CASE.**

```typescript
// Good Example - src/context/constants/navigation.ts
export const NavigationLinks = [
  { label: "Skills", href: "#skills" },
  { label: "Experience", href: "#experience" },
  { label: "Education", href: "#education" },
] as const;
```

## Type Definitions

- **All TypeScript interfaces and types must be placed in the `src/types` directory.**
- Create a subfolder (e.g., `context/`) if you need to organize types by feature or context.
- **Do not define interfaces or types directly in context, constants, or provider files.**

```typescript
// src/types/context/navigation.ts
export interface NavigationLink {
  label: string;
  href: string;
}

export type NavigationLinkArray = NavigationLink[];
```

## Context Providers

- Create context providers in `context/providers/`.
- Import types from `src/types` as needed.

```typescript
// src/context/providers/navigation-provider.tsx
import { createContext, useContext } from 'react';
import { NavigationLinks } from '../constants/navigation';
import type { NavigationLink } from '@/types/context/navigation';

const NavigationContext = createContext<NavigationLink[]>(NavigationLinks);

export const NavigationProvider = ({ children }: { children: React.ReactNode }) => (
  <NavigationContext.Provider value={NavigationLinks}>
    {children}
  </NavigationContext.Provider>
);

export const useNavigation = () => useContext(NavigationContext);
```

## Best Practices

- Use `as const` for readonly arrays in constants.
- Export constants and types as named exports.
- Group related constants and types in the same file or subfolder.
- Use descriptive names for all exports.

## File Naming Conventions

- Use **kebab-case** for file names: `navigation-provider.tsx`, `theme-constants.ts`, `navigation.ts`.
- Use **PascalCase** for context names, provider components, and exported constant variable names: `NavigationContext`, `NavigationProvider`, `NavigationLinks`.
- Use **camelCase** for variables, custom hooks, and function names: `useNavigation`.

## Summary

- **All TypeScript interfaces and types must be in `src/types` (with subfolders as needed).**
- Constants go in `src/context/constants/` and must use PascalCase for exported variable names.
- Providers go in `src/context/providers/`.
- Import types from `src/types` in your context and provider files.
- Keep your codebase organized, maintainable, and type-safe.
