---
description: how to write and structure mongodb models
globs: 
alwaysApply: false
---
# MongoDB Models Guidelines

This document outlines the standards and best practices for creating and organizing MongoDB models in our project.

## Directory Structure

```
src/
├── types/
│   └── models/                 # Model interfaces
│       ├── user.types.ts
│       ├── post.types.ts
│       └── index.ts           # Type exports
├── enums/                     # Enum definitions
│   ├── user.enum.ts          # User-related enums
│   ├── post.enum.ts          # Post-related enums
│   └── index.ts              # Enum exports
├── schemas/                    # Shared schema objects
│   ├── comment.schema.ts      # Reusable schema objects
│   └── address.schema.ts
└── models/                     # Mongoose models
    ├── index.ts               # Central export file
    ├── schemas/               # Mongoose schemas
    │   ├── user.schema.ts
    │   └── post.schema.ts
    └── models/                # Model definitions
        ├── user.model.ts
        └── post.model.ts
```

## Enum Definitions

1. User Enums:
```typescript
// src/enums/user.enum.ts
export enum UserRole {
  ADMIN = 'admin',
  USER = 'user',
  MODERATOR = 'moderator'
}

export enum UserStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  SUSPENDED = 'suspended'
}
```

2. Post Enums:
```typescript
// src/enums/post.enum.ts
export enum PostStatus {
  DRAFT = 'draft',
  PUBLISHED = 'published',
  ARCHIVED = 'archived'
}

export enum PostVisibility {
  PUBLIC = 'public',
  PRIVATE = 'private',
  UNLISTED = 'unlisted'
}
```

3. Export Enums:
```typescript
// src/enums/index.ts
export * from './user.enum'
export * from './post.enum'
// ... other enum exports
```

## Type Definitions

1. Model Interfaces (Using Enums):

```typescript
// src/types/models/user.types.ts
import { Types } from 'mongoose'
import type { IAddress } from '@/schemas/address.schema'
import { UserRole, UserStatus } from '@/enums/user.enum'

export interface IUser {
  _id: Types.ObjectId
  email: string
  name: string
  password: string
  role: UserRole
  status: UserStatus
  addresses: IAddress[]
  createdAt: Date
  updatedAt: Date
}

// Define model methods interface
export interface IUserMethods {
  comparePassword(password: string): Promise<boolean>
  generateAuthToken(): string
}

// Combine document type with methods
export type UserModel = Model<IUser, {}, IUserMethods>
```

## Schema Implementation (With Enums)

```typescript
// src/models/schemas/user.schema.ts
import { Schema } from 'mongoose'
import type { IUser } from '@/types/models/user.types'
import { UserRole, UserStatus } from '@/enums/user.enum'

export const userSchema = new Schema<IUser>({
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    trim: true,
    lowercase: true
  },
  role: {
    type: String,
    enum: {
      values: Object.values(UserRole),
      message: 'Invalid user role'
    },
    default: UserRole.USER
  },
  status: {
    type: String,
    enum: {
      values: Object.values(UserStatus),
      message: 'Invalid user status'
    },
    default: UserStatus.ACTIVE
  }
  // ... other fields
})
```

## Import Conventions

```typescript
// Types
import type { IUser, IUserMethods } from '@/types/models/user.types'
import type { IPost } from '@/types/models/post.types'

// Enums
import { UserRole, UserStatus } from '@/enums/user.enum'
import { PostStatus, PostVisibility } from '@/enums/post.enum'

// Schema Objects
import { IComment, commentSchema } from '@/schemas/comment.schema'
import { IAddress, addressSchema } from '@/schemas/address.schema'

// Schemas
import { userSchema } from '@/models/schemas/user.schema'

// Models
import { User } from '@/models/models/user.model'
```

## Best Practices

1. Enum Organization:
   - Keep all enums in `src/enums` directory
   - Group related enums in feature-specific files
   - Use PascalCase for enum names
   - Export enums from a central index file
   - Use descriptive enum values

2. Type Organization:
   - Keep all interfaces in `src/types/models`
   - Use consistent naming for interfaces (prefix with 'I')
   - Export types from a central index file
   - Keep model-specific types together

3. Schema Objects:
   - Create reusable schema objects for common structures
   - Keep schema objects in separate files
   - Export both interface and schema object
   - Use consistent naming conventions

4. Array Fields:
   - Define schema objects for array items
   - Import and reuse schema objects
   - Include proper validation for array items
   - Consider array size limits for performance

5. Schema Design:
   - Use appropriate field types and validations
   - Include timestamps for all models
   - Implement proper indexing
   - Use schema options for common configurations

6. Performance:
   - Create indexes for frequently queried fields
   - Use lean() for read operations when possible
   - Implement proper population strategies
   - Use projection to select only needed fields

7. Relationships:
```typescript
// Reference relationship
author: {
  type: Schema.Types.ObjectId,
  ref: 'User',
  required: true
}

// Array of references
collaborators: [{
  type: Schema.Types.ObjectId,
  ref: 'User'
}]

// Embedded documents using schema objects
addresses: [addressSchema]
```

8. Type Safety:
   - Always use TypeScript interfaces with models
   - Properly type model methods and statics
   - Use strict type checking
   - Leverage type inference where possible
   - Use enums for fixed sets of values

## Enum Usage Examples

1. In Schema Validation:
```typescript
// Using enums in schema validation
status: {
  type: String,
  enum: {
    values: Object.values(PostStatus),
    message: 'Invalid post status'
  },
  default: PostStatus.DRAFT
}
```

2. In Type Definitions:
```typescript
// Using enums in interfaces
interface IPost {
  status: PostStatus
  visibility: PostVisibility
  // ... other fields
}
```

3. In Query Filters:
```typescript
// Using enums in queries
const publishedPosts = await Post.find({
  status: PostStatus.PUBLISHED,
  visibility: PostVisibility.PUBLIC
})
```

## Validation Rules

1. Required Fields:
```typescript
fieldName: {
  type: String,
  required: [true, 'Field name is required'],
  // other validations
}
```

2. String Validations:
```typescript
fieldName: {
  type: String,
  minlength: [min, 'Minimum length message'],
  maxlength: [max, 'Maximum length message'],
  match: [/regex/, 'Pattern match message'],
  enum: {
    values: Object.values(SomeEnum),
    message: 'Invalid enum value'
  }
}
```

3. Number Validations:
```typescript
fieldName: {
  type: Number,
  min: [min, 'Minimum value message'],
  max: [max, 'Maximum value message'],
  validate: {
    validator: (value: number) => value % 2 === 0,
    message: 'Custom validation message'
  }
}
```